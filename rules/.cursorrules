# Project Technology Stack & Guidelines

## Frontend
- **HTML/CSS**: Multipage application with 'homepage.html' file containing information about the whole project and outlining business goals
- **JavaScript**: Plain vanilla JavaScript (ES6+), no frameworks like React, Vue, or Angular
  - All user interface changes must be done through JavaScript manipulating the DOM
  - Use JavaScript to dynamically create, update, and remove elements
  - Keep the js files to a minimum and write everything as high-level understandable as possible
- **Styling**: Bootstrap 5.x from CDN for all UI components and styling
  - Use Bootstrap classes extensively instead of custom CSS
  - Only write custom CSS when Bootstrap doesn't provide the needed functionality
  - For custom CSS, write it in a separate css file connected to the html page it is styling on
  - Bootstrap CDN: `https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css`
  - Bootstrap JS CDN: `https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js`
 
## Backend
- **Framework**: .NET API (ASP.NET Core Web API)
- **Language**: C#
- **Target Framework**: .NET 9.0 or latest LTS version
- **Architecture**: RESTful API design with proper HTTP methods and status codes

## Database
- **Type**: SQLite database
- **Data Access**: Write SQL queries directly, no ORM
- **File Location**: Store SQLite database file in the `/api` folder
- **Connection String**: Store in `appsettings.json` for simplicity (e.g., "Data Source=./api/database.db")

## Project Structure Guidelines
- Keep frontend and backend in separate folders/directories
- Use clear naming conventions for files and folders
- Follow .NET naming conventions for C# code (PascalCase for classes, camelCase for variables)
- Use meaningful variable and function names in JavaScript

## Development Practices
- Write clean, readable code with appropriate comments
- Use async/await for API calls in JavaScript
- Implement proper error handling in both frontend and backend
- Use Bootstrap's responsive design principles
- Follow REST API best practices for the backend
- Use proper HTTP status codes and error responses

## File Organization
- Frontend files: 'homepage.html', 'marketplace.html', 'fisher.html', 'admin.html'
- Backend files: C# project files in a dedicated backend folder
- Database: SQLite file in the `/api` folder
- Documentation: Keep any documentation files in the project root

## Dependencies
- Frontend: Only Bootstrap from CDN, no npm/node_modules
- Backend: Use NuGet packages as needed for .NET dependencies
- Database: Microsoft.Data.Sqlite package for direct SQL access

## Code Style
- Use consistent indentation (2 spaces for HTML/CSS/JS, 4 spaces for C#)
- Comment complex logic and API endpoints
- Use meaningful commit messages
- Keep functions and methods focused and single-purpose

## Cursor Commands
- Kill and start the API whenever affecting changes are made. Make sure to run command cd api before trying to start or kill.
- API run command is dotnet run and API kill pkill "dotnet run" || true
- To view project the .html path will be copied and pasted into a browser.
